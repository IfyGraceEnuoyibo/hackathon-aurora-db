name: Terraform Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev or prod)"
        required: true
        default: "dev"   

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Terraform Init
      - name: Terraform Init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      # Terraform Validate
      - name: Terraform Validate
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform validate

      # Terraform Plan
      - name: Terraform Plan
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform plan

      # Wait for Terraform Apply in Terraform Cloud
      - name: Wait for Terraform Apply
        id: wait
        run: |
          echo "Waiting for Terraform Apply to complete in Terraform Cloud..."
          while true; do
            # Check the status of the most recent Terraform run in the workspace
            STATUS=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/workspaces/hackathon-aurora-db/runs | jq -r '.data[0].attributes.status')

            if [ "$STATUS" == "applied" ]; then
              echo "Terraform Apply has completed successfully."
              break
            elif [ "$STATUS" == "errored" ]; then
              echo "Terraform Apply failed. Exiting workflow."
              exit 1
            else
              echo "Current status: $STATUS. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      # Run Schema Initialization
      - name: Initialize Schema
        run: |
          ./schemas/init_schema.sh

      # Test Database
      - name: Test Database Connectivity and Schema
        run: |
          ./test/test_connectivity.sh
          ./test/test_data_integrity.sh
